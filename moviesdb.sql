-- MySQL Script generated by MySQL Workbench
-- Sat Sep 10 23:48:49 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema moviesdb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema moviesdb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `moviesdb` DEFAULT CHARACTER SET utf8 ;
USE `moviesdb` ;

-- -----------------------------------------------------
-- Table `moviesdb`.`persons`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `moviesdb`.`persons` (
  `person_id` INT NOT NULL AUTO_INCREMENT,
  `person_name` VARCHAR(255) NOT NULL,
  `dob` DATETIME NOT NULL,
  PRIMARY KEY (`person_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `moviesdb`.`movies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `moviesdb`.`movies` (
  `movie_id` INT NOT NULL AUTO_INCREMENT,
  `movie_name` VARCHAR(255) NOT NULL,
  `year` INT NOT NULL,
  `rating` DOUBLE NOT NULL,
  `runtime` INT NOT NULL,
  `genre` VARCHAR(255) NOT NULL,
  `earnings_rank` INT NOT NULL,
  PRIMARY KEY (`movie_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `moviesdb`.`actors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `moviesdb`.`actors` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `actor_id` INT NOT NULL,
  `movie_id` INT NOT NULL,
  PRIMARY KEY (`id`, `actor_id`, `movie_id`),
  CONSTRAINT `fk_persons_has_movies_persons`
    FOREIGN KEY (`actor_id`)
    REFERENCES `moviesdb`.`persons` (`person_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_persons_has_movies_movies1`
    FOREIGN KEY (`movie_id`)
    REFERENCES `moviesdb`.`movies` (`movie_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `moviesdb`.`directors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `moviesdb`.`directors` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `movie_id` INT NOT NULL,
  `director_id` INT NOT NULL,
  PRIMARY KEY (`id`, `movie_id`, `director_id`),
  CONSTRAINT `fk_movies_has_persons_movies1`
    FOREIGN KEY (`movie_id`)
    REFERENCES `moviesdb`.`movies` (`movie_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_movies_has_persons_persons1`
    FOREIGN KEY (`director_id`)
    REFERENCES `moviesdb`.`persons` (`person_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `moviesdb`.`oscars`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `moviesdb`.`oscars` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `person_id` INT NOT NULL,
  `movie_id` INT NOT NULL,
  `type` VARCHAR(255) NOT NULL,
  `year` INT NOT NULL,
  PRIMARY KEY (`id`, `person_id`, `movie_id`),
  CONSTRAINT `fk_persons_has_movies_persons1`
    FOREIGN KEY (`person_id`)
    REFERENCES `moviesdb`.`persons` (`person_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_persons_has_movies_movies2`
    FOREIGN KEY (`movie_id`)
    REFERENCES `moviesdb`.`movies` (`movie_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- Find the Best-Picture winner with the best/smallest earnings rank. The
-- result should have the form (name, earnings_rank). Assume no two movies
-- have the same earnings rank.

SELECT movie_name, min(earnings_rank) FROM `movies`;
