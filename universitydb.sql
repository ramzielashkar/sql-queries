-- MySQL Script generated by MySQL Workbench
-- Sun Sep 11 00:23:23 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema universitydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema universitydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `universitydb` DEFAULT CHARACTER SET utf8 ;
USE `universitydb` ;

-- -----------------------------------------------------
-- Table `universitydb`.`students`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universitydb`.`students` (
  `student_id` INT NOT NULL AUTO_INCREMENT,
  `student_name` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`student_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `universitydb`.`departments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universitydb`.`departments` (
  `department_id` INT NOT NULL AUTO_INCREMENT,
  `department_name` VARCHAR(255) NOT NULL,
  `department_office` INT NOT NULL,
  PRIMARY KEY (`department_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `universitydb`.`rooms`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universitydb`.`rooms` (
  `room_id` INT NOT NULL AUTO_INCREMENT,
  `room_name` VARCHAR(255) NOT NULL,
  `room_capacity` INT NOT NULL,
  PRIMARY KEY (`room_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `universitydb`.`courses`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universitydb`.`courses` (
  `crn` INT NOT NULL AUTO_INCREMENT,
  `course_name` VARCHAR(255) NOT NULL,
  `start_time` DATETIME NOT NULL,
  `end_time` DATETIME NOT NULL,
  `room_id` INT NOT NULL,
  PRIMARY KEY (`crn`),
  CONSTRAINT `fk_courses_rooms`
    FOREIGN KEY (`room_id`)
    REFERENCES `universitydb`.`rooms` (`room_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `universitydb`.`majors_in`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universitydb`.`majors_in` (
  `major_id` INT NOT NULL AUTO_INCREMENT,
  `student_id` INT NOT NULL,
  `department_id` INT NOT NULL,
  PRIMARY KEY (`major_id`, `student_id`, `department_id`),
  CONSTRAINT `fk_students_has_departments_students1`
    FOREIGN KEY (`student_id`)
    REFERENCES `universitydb`.`students` (`student_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_students_has_departments_departments1`
    FOREIGN KEY (`department_id`)
    REFERENCES `universitydb`.`departments` (`department_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `universitydb`.`enrolled`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universitydb`.`enrolled` (
  `student_id` INT NOT NULL,
  `course_crn` INT NOT NULL,
  `credit_status` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`student_id`, `course_crn`),
  CONSTRAINT `fk_students_has_courses_students1`
    FOREIGN KEY (`student_id`)
    REFERENCES `universitydb`.`students` (`student_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_students_has_courses_courses1`
    FOREIGN KEY (`course_crn`)
    REFERENCES `universitydb`.`courses` (`crn`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- SQL query to find all the rooms that can seat at least 100 people
SELECT * FROM `rooms` WHERE room_capacity>=100

-- SQL query to find the courses with the earliest start time
SELECT course_name, MIN(start_time) FROM `courses`



SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
